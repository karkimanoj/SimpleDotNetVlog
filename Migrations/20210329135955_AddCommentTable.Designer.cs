// <auto-generated />
using System;
using Blog.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210329135955_AddCommentTable")]
    partial class AddCommentTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blog.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Blog.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Blog.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Blog.Models.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("PermissionId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            PermissionId = 1L,
                            DisplayName = "add post",
                            Name = "add_post"
                        },
                        new
                        {
                            PermissionId = 2L,
                            DisplayName = "edit post",
                            Name = "edit_post"
                        },
                        new
                        {
                            PermissionId = 3L,
                            DisplayName = "delete post",
                            Name = "delete_post"
                        },
                        new
                        {
                            PermissionId = 4L,
                            DisplayName = "add category",
                            Name = "add_category"
                        },
                        new
                        {
                            PermissionId = 5L,
                            DisplayName = "edit category",
                            Name = "edit_category"
                        },
                        new
                        {
                            PermissionId = 6L,
                            DisplayName = "delete category",
                            Name = "delete_category"
                        },
                        new
                        {
                            PermissionId = 7L,
                            DisplayName = "add tag",
                            Name = "add_tag"
                        },
                        new
                        {
                            PermissionId = 8L,
                            DisplayName = "edit tag",
                            Name = "edit_tag"
                        },
                        new
                        {
                            PermissionId = 9L,
                            DisplayName = "delete tag",
                            Name = "delete_tag"
                        },
                        new
                        {
                            PermissionId = 10L,
                            DisplayName = "add comment",
                            Name = "add_comment"
                        },
                        new
                        {
                            PermissionId = 11L,
                            DisplayName = "edit comment",
                            Name = "edit_comment"
                        },
                        new
                        {
                            PermissionId = 12L,
                            DisplayName = "delete comment",
                            Name = "delete_comment"
                        },
                        new
                        {
                            PermissionId = 13L,
                            DisplayName = "add user",
                            Name = "add_user"
                        },
                        new
                        {
                            PermissionId = 14L,
                            DisplayName = "edit user",
                            Name = "edit_user"
                        },
                        new
                        {
                            PermissionId = 15L,
                            DisplayName = "activate deactivate user",
                            Name = "activate_deactivate_user"
                        },
                        new
                        {
                            PermissionId = 16L,
                            DisplayName = "verify post",
                            Name = "verify_post"
                        });
                });

            modelBuilder.Entity("Blog.Models.PermissionUser", b =>
                {
                    b.Property<long>("PermissionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("PermissionId", "UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PermissionUser");

                    b.HasData(
                        new
                        {
                            PermissionUserId = 1L,
                            PermissionId = 1L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 2L,
                            PermissionId = 1L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 3L,
                            PermissionId = 2L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 4L,
                            PermissionId = 2L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 5L,
                            PermissionId = 3L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 6L,
                            PermissionId = 3L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 7L,
                            PermissionId = 4L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 8L,
                            PermissionId = 5L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 9L,
                            PermissionId = 6L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 10L,
                            PermissionId = 7L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 11L,
                            PermissionId = 7L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 12L,
                            PermissionId = 8L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 13L,
                            PermissionId = 8L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 14L,
                            PermissionId = 9L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 15L,
                            PermissionId = 9L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 16L,
                            PermissionId = 10L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 17L,
                            PermissionId = 10L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 18L,
                            PermissionId = 11L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 19L,
                            PermissionId = 11L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 20L,
                            PermissionId = 12L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 21L,
                            PermissionId = 12L,
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76"
                        },
                        new
                        {
                            PermissionUserId = 22L,
                            PermissionId = 13L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 23L,
                            PermissionId = 14L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 24L,
                            PermissionId = 15L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        },
                        new
                        {
                            PermissionUserId = 25L,
                            PermissionId = 16L,
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e"
                        });
                });

            modelBuilder.Entity("Blog.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Image")
                        .IsUnique()
                        .HasFilter("[Image] IS NOT NULL");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Blog.Models.PostTag", b =>
                {
                    b.Property<long>("PostTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("PostTagId");

                    b.HasIndex("TagId");

                    b.HasIndex("PostId", "TagId")
                        .IsUnique();

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("Blog.Models.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "895078dc-1225-4c5b-be43-2ff61cdca597",
                            ConcurrencyStamp = "aba0693b-959c-4246-9ef5-7e80e6cc3656",
                            Name = "superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "a3a0a50c-3c43-4609-8be0-782aaf42f075",
                            ConcurrencyStamp = "23b6af00-8980-49e7-9d52-3c0bb48d287b",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "757c5db6-2d1b-4957-b301-3fddafb89fee",
                            ConcurrencyStamp = "c8836d6a-3d1e-446c-b4d9-327b307a03ae",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "deda37d1-6eb5-49e0-99d6-04bdc7f89637",
                            ConcurrencyStamp = "9864535c-085a-447c-a592-8ad14fe40b97",
                            Name = "blogger",
                            NormalizedName = "BLOGGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1e299ddc-4366-499f-887a-246f4a51c0e2",
                            RoleId = "895078dc-1225-4c5b-be43-2ff61cdca597"
                        },
                        new
                        {
                            UserId = "1e299ddc-4366-499f-887a-246f4a51c0e2",
                            RoleId = "a3a0a50c-3c43-4609-8be0-782aaf42f075"
                        },
                        new
                        {
                            UserId = "1e299ddc-4366-499f-887a-246f4a51c0e2",
                            RoleId = "757c5db6-2d1b-4957-b301-3fddafb89fee"
                        },
                        new
                        {
                            UserId = "1e299ddc-4366-499f-887a-246f4a51c0e2",
                            RoleId = "deda37d1-6eb5-49e0-99d6-04bdc7f89637"
                        },
                        new
                        {
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e",
                            RoleId = "895078dc-1225-4c5b-be43-2ff61cdca597"
                        },
                        new
                        {
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e",
                            RoleId = "a3a0a50c-3c43-4609-8be0-782aaf42f075"
                        },
                        new
                        {
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e",
                            RoleId = "757c5db6-2d1b-4957-b301-3fddafb89fee"
                        },
                        new
                        {
                            UserId = "5c49772c-a43f-45d5-be7b-55a877a3644e",
                            RoleId = "deda37d1-6eb5-49e0-99d6-04bdc7f89637"
                        },
                        new
                        {
                            UserId = "d373e67d-eb8d-44da-bf8b-f13c2410de76",
                            RoleId = "deda37d1-6eb5-49e0-99d6-04bdc7f89637"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Blog.Models.Comment", b =>
                {
                    b.HasOne("Blog.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Models.PermissionUser", b =>
                {
                    b.HasOne("Blog.Models.Permission", "Permission")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Models.ApplicationUser", "User")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Blog.Models.Post", b =>
                {
                    b.HasOne("Blog.Models.ApplicationUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Blog.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Models.PostTag", b =>
                {
                    b.HasOne("Blog.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Blog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Blog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Blog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
